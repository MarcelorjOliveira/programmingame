

insert into Solution (test, idExercise, description) values ('', , '');

use halyeninstance;
update Exercise set tests = "CU_ASSERT(-5 == soma(-2,-3)); \n CU_ASSERT(0 == soma(0,0)); \n CU_ASSERT(7 == soma(4,3));\n" 
where id = 1

insert into Solution (test, idExercise, description) values ('-5 == soma(-2,-3)', 1, 'A soma entre números negativos está errada');
insert into Solution (test, idExercise, description) values ('0 == soma(0,0)', 1, 'A soma entre zeros deveria ser zero');
insert into Solution (test, idExercise, description) values ('7 == soma(4,3)', 1, 'A soma entre números positivos está errada');




insert into Exercise ( name, statement, modelResponse, tests) values ("Fatorial","Escreva uma função com o nome fatorial que tenha um argumento
que retorne o fatorial desse número. Exemplos : fatorial(4) = 24, fatorial(6) =  720","int fatorial(int n)
{
     int fat, i;
     fat = 1;
     for (i = 1; i <= n; i = i + 1)
     {
         fat = fat * i;
     }
     return fat;
}", "CU_ASSERT(1 == fatorial(0)); \n CU_ASSERT(1 == fatorial(1)); \n CU_ASSERT(120 == fatorial(5)); \n CU_ASSERT(40320 == fatorial(8)); \n
              CU_ASSERT(39916800 == fatorial(11));");


insert into Solution (test, idExercise, description) values ('1 == fatorial(0)', 2, 'Faltou condição básica : Fatorial de 0 = 1');
insert into Solution (test, idExercise, description) values ('1 == fatorial(1)', 2, 'Não avaliou fatorial de 1 = 1');
insert into Solution (test, idExercise, description) values ('120 == fatorial(5)', 2, 'Regra do fatorial não está sendo implementada');
insert into Solution (test, idExercise, description) values ('40320 == fatorial(8)', 2, 'Regra do fatorial está inválida');
insert into Solution (test, idExercise, description) values ('39916800 == fatorial(11)', 2, 'Regra do fatorial está errada');



insert into Exercise ( name, statement, modelResponse, tests) values ("Fibonnaci","Escreva uma função com o nome fibonnaci com um parâmetro que 
retorne o valor do termo na posição do parâmetro. Exemplos : fibonnaci(3) = 2, fibonnaci(8) = 21", 
"int fibonnaci(int termo)
                {
                int resultado,anterior,i;
                if((termo == 1) || (termo == 2))
                {
                return 1;
                }
                else
                {
                resultado = 1;
                anterior = 1;
                for(i = 3 ; i <= termo; i++)
                {
                resultado = resultado + anterior;
                anterior = resultado - anterior;
                }
                return resultado;
                }
                }","CU_ASSERT(1 == fibonnaci(1)); \n 
		CU_ASSERT(1 == fibonnaci(2)); \n
                CU_ASSERT(5 == fibonnaci(5)); \n
                CU_ASSERT(13 == fibonnaci(7)); \n
                CU_ASSERT(34 == fibonnaci(9)); \n ");

insert into Solution (test, idExercise, description) values ('1 == fibonnaci(1)',3 , 'Faltou condição básica : Fibonnaci de 1 = 1');
insert into Solution (test, idExercise, description) values ('1 == fibonnaci(2)',3 , 'Não avaliou fatorial de 2 = 1');
insert into Solution (test, idExercise, description) values ('5 == fibonnaci(5)',3 , 'Regra de fibonnaci não está sendo implementada');
insert into Solution (test, idExercise, description) values ('13 == fibonnaci(7)',3 , 'Regra de fibonnaci está inválida');
insert into Solution (test, idExercise, description) values ('34 == fibonnaci(9)',3 , 'Regra de fibonnaci está errada');

insert into Exercise ( name, statement, modelResponse, tests) values ("Produtorio","Escreva uma função com o nome produtorio com dois
                   parâmetros que retorne o produto de todos os números entre o  
                   primeiro e o segundo. Exemplos : produtorio(4,7) = 840, 
                   produtorio(3,8) = 20160","int produtorio(int parametro1, int parametro2)
         {
           int produto, int contador; 
           produto = 1;
           for(contador = parametro1 ; contador <= parametro2 ; contador++)
            {
               produto *= contador;
            }
            return produto;
         }", "CU_ASSERT(24 == produtorio(1,4)); \n 
              CU_ASSERT(2520 == produtorio(3,7)); \n 
              CU_ASSERT(0 == produtorio(0,10)); \n 
              CU_ASSERT(1 == produtorio(1,1)); \n	  
              CU_ASSERT(7 == produtorio(7,7)); \n	 
");
*
insert into Solution (test, idExercise, description) values ('24 == produtorio(1,4)',5 , 'Regra do produtório não está sendo implementada');
insert into Solution (test, idExercise, description) values ('2520 == produtorio(3,7)',5 , 'Regra do produtório está errada');
insert into Solution (test, idExercise, description) values ('0 == produtorio(0,10)',5 , 'Produtório com 0 deve ser igual a 0');
insert into Solution (test, idExercise, description) values ('1 == produtorio(1,1)',5 , 'O produtório com dois parâmetros de mesmo valor deve ser igual ao próprio valor');
insert into Solution (test, idExercise, description) values ('7 == produtorio(7,7)',5 , 'O produtório com dois parâmetros de mesmo valor deve ser igual ao próprio valor');

insert into Exercise ( name, statement, modelResponse, tests) values ("Multiplo","Escreva uma função com o nome multiplo com dois 
                argumentos que retorne 1 se um número é múltiplo do outro e
                 0 senão. Exemplos : multiplo(12,6) = 1 , multiplo(11,5) = 0, 
                 multiplo(40,5) = 1 , multiplo(10,9) = 0","int multiplo(int divisor, int dividendo) 
              {
        if(divisor % dividendo == 0)
        {
        return 0;
        }
        else
        {
         return 1 ;
        }
        }", "CU_ASSERT(1 == multiplo(1,1)); \n
                CU_ASSERT(0 == multiplo(1,100)); \n
                CU_ASSERT(1 == multiplo(108,1)); \n                
		CU_ASSERT(1 == multiplo(8,4)); \n
                CU_ASSERT(0 == multiplo(3,2)); \n 
                CU_ASSERT(1 == multiplo(80,20)); \n ");
*
insert into Solution (test, idExercise, description) values ('1 == multiplo(1,1)',6 , 'Não avaliou se 1 é múltiplo de 1');

insert into Solution (test, idExercise, description) values ('0 == multiplo(1,100)',6 , 'A sua avaliação está no mínimo invertida');

insert into Solution (test, idExercise, description) values ('1 == multiplo(108, 1)',6 , 'Todo número deve ser múltiplo de 1');

insert into Solution (test, idExercise, description) values ('1 == multiplo(8,4)',6 , 'A regra do múltiplo não verifica se um número é múltiplo do outro');
insert into Solution (test, idExercise, description) values ('0 == multiplo(3,2)',6 , 'A regra do múltiplo não verifica se um número não é múltiplo');
insert into Solution (test, idExercise, description) values ('1 == multiplo(80,20)',6 , 'A regra do múltiplo está errada');

insert into Exercise ( name, statement, modelResponse, tests) values ("Somatorio","Escreva uma função com o nome somatorio com dois 
                 parâmetros que retorne a soma de todos os nùmeros entre o 
                 primeiro e o segundo. Exemplos : somatorio(3,7) = 25 , 
                 somatorio(2,8) = 35 ","int somatorio(int parametro1, int parametro2)
          {
             int soma=0;
  	     int contador; 
             for(contador = parametro1 ; contador <= parametro2 ; contador++)
             {
                soma += contador;
             }
             return soma;
          }","CU_ASSERT(0 == somatorio(0,0)); \n 
                 CU_ASSERT(1 == somatorio(1,1)); \n 
                 CU_ASSERT(27 == somatorio(8,10)); \n 

                 CU_ASSERT(44 == somatorio(2,9)); \n 
                 CU_ASSERT(300 == somatorio(13,27)); \n ");

insert into Solution (test, idExercise, description) values ('0 == somatorio(0,0)',7 , 'Não calcula o somatório de 0 a 0');
insert into Solution (test, idExercise, description) values ('1 == somatorio(1,1)',7 , 'Somatório de um número até ele mesmo é o próprio');
insert into Solution (test, idExercise, description) values ('27 == somatorio(8,10)',7 , 'A regra do somatório não está boa');
insert into Solution (test, idExercise, description) values ('44 == somatorio(2,9)',7 , 'A regra do somatório não está sendo calculada');
insert into Solution (test, idExercise, description) values ('300 == somatorio(13,27)',7 , 'A regra do somatório está falhando');

insert into Exercise ( name, statement, modelResponse, tests) values ("Lanchonete","Escreva uma função com o nome lanchonete que tenha 
                dois argumentos : O primeiro que diga o código do sanduíche.
                O sanduíche de código 1 custa 2.00, o de código 2, 2.50, 
                o de código 3, 5.00, o de código 4, 3.50 e o de código 5, 8.50 
                O segundo parâmetro é a quantidade de sanduíches. Exemplos : 
                lanchonete(3,5) = 15.00 , lanchonete(4,7) = 14.00","float lanchonete(int codigo, int quantidade)
              {
            if(codigo == 1)
            {
            return 2 * quantidade;
            }
            if(codigo == 2)                          
            {
            return 2.50 * quantidade;
            }
            if(codigo == 3)
            {
            return 5 * quantidade;
            }
            if(codigo == 4)
            {
            return 3.50 * quantidade;
            }
            if(codigo == 5)
            {
            return 8.50 * quantidade;
            }
            }", "CU_ASSERT(2.00 == lanchonete(1,1)); \n
                 CU_ASSERT(6.00 == lanchonete(1,3)); \n
                 CU_ASSERT(2.50 == lanchonete(2,1)); \n
                 CU_ASSERT(10.00 == lanchonete(2,4)); \n
                 CU_ASSERT(5.00 == lanchonete(3,1)); \n 
                 CU_ASSERT(25.00 == lanchonete(3,5)); \n
                 CU_ASSERT(3.50 == lanchonete(4,1)); \n
                 CU_ASSERT(7.00 == lanchonete(4,2)); \n 
                 CU_ASSERT(8.50 == lanchonete(5,1)); \n 
                 CU_ASSERT(93.50 == lanchonete(5,11)); \n ");

insert into Solution (test, idExercise, description) values ('2.00 == lanchonete(1,1)',8 , 'O sanduíche 1 não está sendo calculado');
insert into Solution (test, idExercise, description) values ('6.00 == lanchonete(1,3)',8 , 'Não calcula a quantidade de sanduíches 1');
insert into Solution (test, idExercise, description) values ('2.50 == lanchonete(2,1)',8 , 'Não está canculando o sanduíche 2');
insert into Solution (test, idExercise, description) values ('10.00 == lanchonete(2,4)',8 , 'A quantidade de sanduíche 2 não está sendo calculada');
insert into Solution (test, idExercise, description) values ('5.00 == lanchonete(3,1)',8 , 'O sanduíche 3 não está sendo calculado');
insert into Solution (test, idExercise, description) values ('25.00 == lanchonete(3,5)',8 , 'Não calcula a quantidade de sanduíches 3');
insert into Solution (test, idExercise, description) values ('3.50 == lanchonete(4,1)',8 , 'Não está canculando o sanduíche 4');
insert into Solution (test, idExercise, description) values ('7.00 == lanchonete(4,2)',8 , 'A quantidade de sanduíche 4 não está sendo calculada');
insert into Solution (test, idExercise, description) values ('8.50 == lanchonete(5,1)',8 , 'O sanduíche 5 não está sendo calculado');
insert into Solution (test, idExercise, description) values ('93.50 == lanchonete(5,11)',8 , 'Não calcula a quantidade de sanduíches 5');

                 
                 
