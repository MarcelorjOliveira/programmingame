insert into Exercise ( name, statement, modelResponse, tests) values ("Soma","Escreva uma função com o nome soma que tenha dois
argumentos inteiros e retorne um número inteiro também. Exemplos : soma(5,7) = 12 . soma(2,9) = 11","int soma(int x, int y)\n {\n int z; \n z = x + y; \n return z; \n
                 }\n", "CU_ASSERT(5 == soma(2,3)); \n CU_ASSERT(7 == soma(4,3)); \n CU_ASSERT(87 == soma(43,44));\n");

insert into Exercise ( name, statement, modelResponse, tests) values ("Fatorial","Escreva uma função com o nome fatorial que tenha um argumento
que retorne o fatorial desse número. Exemplos : fatorial(4) = 24, fatorial(6) =  720","int fatorial(int n)
{
     int fat, i;
     fat = 1;
     for (i = 1; i <= n; i = i + 1)
     {
         fat = fat * i;
     }
     return fat;
}", "CU_ASSERT(1 == fatorial(0)); \n CU_ASSERT(1 == fatorial(1)); \n CU_ASSERT(120 == fatorial(5)); \n CU_ASSERT(40320 == fatorial(8)); \n
              CU_ASSERT(39916800 == fatorial(11));");

insert into Exercise ( name, statement, modelResponse, tests) values ("Fibonnaci","Escreva uma função com o nome fibonnaci com um parâmetro que 
retorne o valor do termo na posição do parâmetro. Exemplos : fibonnaci(3) = 2, fibonnaci(8) = 21", 
"int fibonnaci(int termo)
                {
                int resultado,anterior,i;
                if((termo == 1) || (termo == 2))
                {
                return 1;
                }
                else
                {
                resultado = 1;
                anterior = 1;
                for(i = 3 ; i <= termo; i++)
                {
                resultado = resultado + anterior;
                anterior = resultado - anterior;
                }
                return resultado;
                }
                }","CU_ASSERT(1 == fibonnaci(1)); \n 
		CU_ASSERT(1 == fibonnaci(2)); \n
                CU_ASSERT(5 == fibonnaci(5)); \n
                CU_ASSERT(13 == fibonnaci(7)); \n
                CU_ASSERT(34 == fibonnaci(9)); \n ");

insert into Exercise ( name, statement, modelResponse, tests) values ("SomaMultiplos","Escreva uma função com o nome somaMultiplos com dois 
parâmetros, o primeiro são os múltiplos de qual número e o segundo até tal número, que me retorne a soma dos Múltiplos. Exemplos : somaMultiplos(5,11) = 15 , 
somaMultiplos(2,9) = 20","int somaMultiplos(int multiplo, int parametro)
                { 
                int auxiliar=1,resultadosomaMultiplos = 0;
                while(multiplo * auxiliar <= parametro)
                {
                resultadosomaMultiplos += multiplo * auxiliar;
                auxiliar++; 
                }
                return resultadosomaMultiplos;
                }", "CU_ASSERT(18 == somaMultiplos(3,10)); \n 
            
		CU_ASSERT(180 == somaMultiplos(5,40)); \n
                CU_ASSERT(450 == somaMultiplos(10,90)); \n
                CU_ASSERT(624 == somaMultiplos(8,100)); \n 
                CU_ASSERT(650 == somaMultiplos(2,51)); \n ");

insert into Exercise ( name, statement, modelResponse, tests) values ("Produtorio","Escreva uma função com o nome produtorio com dois
                   parâmetros que retorne o produto de todos os números entre o  
                   primeiro e o segundo. Exemplos : produtorio(4,7) = 840, 
                   produtorio(3,8) = 20160","int produtorio(int parametro1, int parametro2)
         {
           int produto, int contador; 
           produto = 1;
           for(contador = parametro1 ; contador <= parametro2 ; contador++)
            {
               produto *= contador;
            }
            return produto;
         }", "CU_ASSERT(24 == produtorio(1,4)); \n 
              CU_ASSERT(60 == produtorio(3,5)); \n
              CU_ASSERT(504 == produtorio(7,9)); \n 
              CU_ASSERT(2520 == produtorio(3,7)); \n 
              CU_ASSERT(0 == produtorio(0,10)); \n ");

insert into Exercise ( name, statement, modelResponse, tests) values ("Multiplo","Escreva uma função com o nome multiplo com dois 
                argumentos que retorne 0 se um número é múltiplo do outro e
                 1 senão. Exemplos : multiplo(12,6) = 0 , multiplo(11,5) = 1, 
                 multiplo(40,5) = 0 , multiplo(10,9) = 1","int multiplo(int divisor, int dividendo) 
              {
        if(divisor % dividendo == 0)
        {
        return 0;
        }
        else
        {
         return 1 ;
        }
        }", "CU_ASSERT(0 == multiplo(1,1)); \n
                CU_ASSERT(1 == multiplo(1,100)); \n
                CU_ASSERT(0 == multiplo(8,4)); \n
                CU_ASSERT(1 == multiplo(3,2)); \n 
                CU_ASSERT(0 == multiplo(80,20)); \n ");

insert into Exercise ( name, statement, modelResponse, tests) values ("Somatorio","Escreva uma função com o nome somatorio com dois 
                 parâmetros que retorne a soma de todos os nùmeros entre o 
                 primeiro e o segundo. Exemplos : somatorio(3,7) = 25 , 
                 somatorio(2,8) = 35 ","int somatorio(int parametro1, int parametro2)
          {
             int soma=0;
  	     int contador; 
             for(contador = parametro1 ; contador <= parametro2 ; contador++)
             {
                soma += contador;
             }
             return soma;
          }","CU_ASSERT(10 == somatorio(1,4)); \n 
                 CU_ASSERT(27 == somatorio(8,10)); \n 
                 CU_ASSERT(44 == somatorio(2,9)); \n 
                 CU_ASSERT(6 == somatorio(0,3)); \n 
                 CU_ASSERT(300 == somatorio(13,27)); \n ");

insert into Exercise ( name, statement, modelResponse, tests) values ("Lanchonete","Escreva uma função com o nome lanchonete que tenha 
                dois argumentos : O primeiro que diga o código do sanduíche.
                O sanduíche de código 1 custa 2.00, o de código 2, 2.50, 
                o de código 3, 5.00, o de código 4, 3.50 e o de código 5, 8.50 
                O segundo parâmetro é a quantidade de sanduíches. Exempĺos : 
                lanchonete(3,5) = 15.00 , lanchonete(4,7) = 14.00","float lanchonete(int codigo, int quantidade)
              {
            if(codigo == 1)
            {
            return 2 * quantidade;
            }
            if(codigo == 2)                          
            {
            return 2.50 * quantidade;
            }
            if(codigo == 3)
            {
            return 5 * quantidade;
            }
            if(codigo == 4)
            {
            return 3.50 * quantidade;
            }
            if(codigo == 5)
            {
            return 8.50 * quantidade;
            }
            }", "CU_ASSERT(2.00 == lanchonete(1,1)); \n
                 CU_ASSERT(6.00 == lanchonete(1,3)); \n
                 CU_ASSERT(2.50 == lanchonete(2,1)); \n
                 CU_ASSERT(10.00 == lanchonete(2,4)); \n
                 CU_ASSERT(5.00 == lanchonete(3,1)); \n 
                 CU_ASSERT(25.00 == lanchonete(3,5)); \n
                 CU_ASSERT(3.50 == lanchonete(4,1)); \n
                 CU_ASSERT(7.00 == lanchonete(4,2)); \n 
                 CU_ASSERT(8.50 == lanchonete(5,1)); \n 
                 CU_ASSERT(93.50 == lanchonete(5,11)); \n ");

