insert into Exercise ( name, statement, modelResponse, tests, course, module) values ("Conta", "Escreva uma classe Conta que possua os atributos
 titular e saldo e os métodos saca que retira do saldo e deposita que acrescenta ao saldo", "
class Conta {\n
    String titular;\n
    double saldo;\n
\n
    void saca(double quantidade) {\n
        this.saldo -= quantidade;\n
    }\n
    void deposita(double quantidade) {\n
        this.saldo += quantidade;\n
    }\n
}
", "package Conta;\n
\n
import org.junit.After;\n
import org.junit.AfterClass;\n
import org.junit.Before;\n
import org.junit.BeforeClass;\n
import org.junit.Test;\n
import static org.junit.Assert.*;\n
import Conta.Conta;\n
\n
public class ContaTest {\n
\n
    @Test\n
    public void testTitularAttribute() {\n
	Conta conta = new Conta();\n
\n
	conta.titular = \"Thiago\";\n
        assertEquals(\"Thiago\", conta.titular);\n
    }\n
\n
    @Test\n
    public void testSaldoAttribute() {\n
	Conta conta = new Conta();\n
\n
	conta.saldo = 230.00;\n
        assertEquals(230.00, conta.saldo, 0.0);\n
    }\n
\n
    @Test\n
    public void testMethodSaca() {\n
	Conta conta = new Conta();\n
\n
	conta.saldo = 200.00;\n
\n
	conta.saca(20);\n
\n
	assertEquals(180.00, conta.saldo, 0.0);\n
    }\n
\n
    @Test\n
    public void testMethodDeposita() {\n
	Conta conta = new Conta();\n
\n
	conta.saldo = 100.00;\n
	conta.deposita(40);\n
        assertEquals(140.00, conta.saldo, 0.0);\n
    }\n
}",2,1);

insert into Exercise ( name, statement, modelResponse, tests, course, module) values ("Carro", "Escreva uma classe Carro que possua os atributos cor, modelo e velocidadeAtual, dois métodos acelera e desacelera ambos com o parametro quantidade e um método capturaVelocidadeAtual que retorne a velocidade atual", "
class Carro {\n
    String cor;\n
    String modelo;\n
    
    double velocidadeAtual;\n
\n
    void acelera(double quantidade) {\n
        this.velocidadeAtual += quantidade;\n
    }\n
    void desacelera(double quantidade) {\n
        this.velocidadeAtual -= quantidade;\n
    }\n
    double capturaVelocidadeAtual() {\n
        return this.velocidadeAtual;\n
    }\n
}
", "package Carro;\n
\n
import org.junit.After;\n
import org.junit.AfterClass;\n
import org.junit.Before;\n
import org.junit.BeforeClass;\n
import org.junit.Test;\n
import static org.junit.Assert.*;\n
import Carro.Carro;\n
\n
public class CarroTest {\n
\n
    @Test\n
    public void testCorAttribute() {\n
	Carro carro = new Carro();\n
\n
	carro.cor = \"Azul\";\n
        assertEquals(\"Azul\", carro.cor);\n
    }\n
    @Test\n
    public void testModeloAttribute() {\n
	Carro carro = new Carro();\n
\n
	carro.modelo = \"Corolla\";\n
        assertEquals(\"Corolla\", carro.modelo);\n
    }\n

\n
    @Test\n
    public void testMethodAcelera() {\n
	Carro carro = new Carro();\n
\n
	carro.velocidadeAtual = 10.00;\n
\n
	carro.acelera(20);\n
\n
	assertEquals(30.00, carro.velocidadeAtual, 0.0);\n
    }\n
\n
    @Test\n
    public void testMethodDesacelera() {\n
	Carro conta = new Conta();\n
\n
	conta.saldo = 100.00;\n
	conta.deposita(40);\n
        assertEquals(140.00, conta.saldo, 0.0);\n
    }\n
}",2,1); 


insert into Exercise ( name, statement, modelResponse, tests, course, module) values ("ContaComEncapsulamento", "Escreva uma classe ContaComEncapsulamento que adicione o modificador de visibilidade privado e getter e setter para cada atributo da classe Conta", "
class ContaComEncapsulamento {\n
    private String titular;\n
    public void setTitular(String titular){\n
    	this.titular = titular;\n
    }\n
    public String getTitular(){\n
    	return this.titular;\n
    }\n
    double saldo;\n
    public void setSaldo(double saldo){\n
   	this.saldo = saldo;\n
    }\n
    public double getSaldo(){\n
    	return this.saldo;\n
    }\n
\n
    void saca(double quantidade) {\n
        this.saldo -= quantidade;\n
    }\n
    void deposita(double quantidade) {\n
        this.saldo += quantidade;\n
    }\n
}
", "package ContaComEncapsulamento;\n
\n
import org.junit.After;\n
import org.junit.AfterClass;\n
import org.junit.Before;\n
import org.junit.BeforeClass;\n
import org.junit.Test;\n
import static org.junit.Assert.*;\n
import ContaComEncapsulamento.ContaComEncapsulamento;\n
\n
public class ContaComEncapsulamentoTest {\n
\n
    @Test\n
    public void testSetAndGetTitular() {\n
	ContaComEncapsulamento conta = new ContaComEncapsulamento();\n
\n
	conta.setTitular(\"Thiago\");\n
        assertEquals(\"Thiago\", conta.getTitular());\n
    }\n
\n
    @Test\n
    public void testSetAndGetSaldo() {\n
	ContaComEncapsulamento conta = new ContaComEncapsulamento();\n
\n
	conta.setSaldo(230.00);\n
        assertEquals(230.00, conta.getSaldo(), 0.0);\n
    }\n
\n
    @Test\n
    public void testMethodSaca() {\n
	ContaComEncapsulamento conta = new ContaComEncapsulamento();\n
\n
	conta.setSaldo(200.00);\n
\n
	conta.saca(20);\n
\n
	assertEquals(180.00, conta.getSaldo(), 0.0);\n
    }\n
\n
    @Test\n
    public void testMethodDeposita() {\n
	ContaComEncapsulamento conta = new ContaComEncapsulamento();\n
\n
	conta.setSaldo(100.00);\n
	conta.deposita(40);\n
        assertEquals(140.00, conta.getSaldo(), 0.0);\n
    }\n
}",2,2);

insert into Exercise ( name, statement, modelResponse, tests, course, module) values (
"PessoaFisica", 
"Crie uma classe PessoaFisica que tem um atributo String cpf e desenvolva um método valida com o cpf como parâmetro e garanta que a pessoa não tenha cpf inválido nem nem cpf inicial vazio",

"
import java.util.InputMismatchException;
class PessoaFisica {\n
    private String CPF;\n
    PessoaFisica(String CPF){
	valida(CPF);
    }
    public boolean valida(String CPF){\n
    	        // considera-se erro CPF's formados por uma sequencia de numeros iguais
        if (CPF.equals(\"00000000000\") ||
            CPF.equals(\"11111111111\") ||
            CPF.equals(\"22222222222\") || CPF.equals(\"33333333333\") ||
            CPF.equals(\"44444444444\") || CPF.equals(\"55555555555\") ||
            CPF.equals(\"66666666666\") || CPF.equals(\"77777777777\") ||
            CPF.equals(\"88888888888\") || CPF.equals(\"99999999999\") ||
            (CPF.length() != 11))
            return(false);
          
        char dig10, dig11;
        int sm, i, r, num, peso;
          
        // \"try\" - protege o codigo para eventuais erros de conversao de tipo (int)
        try {
        // Calculo do 1o. Digito Verificador
            sm = 0;
            peso = 10;
            for (i=0; i<9; i++) {              
        // converte o i-esimo caractere do CPF em um numero:
        // por exemplo, transforma o caractere '0' no inteiro 0         
        // (48 eh a posicao de '0' na tabela ASCII)         
            num = (int)(CPF.charAt(i) - 48); 
            sm = sm + (num * peso);
            peso = peso - 1;
            }
          
            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                dig10 = '0';
            else dig10 = (char)(r + 48); // converte no respectivo caractere numerico
          
        // Calculo do 2o. Digito Verificador
            sm = 0;
            peso = 11;
            for(i=0; i<10; i++) {
            num = (int)(CPF.charAt(i) - 48);
            sm = sm + (num * peso);
            peso = peso - 1;
            }
          
            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                 dig11 = '0';
            else dig11 = (char)(r + 48);
          
        // Verifica se os digitos calculados conferem com os digitos informados.
            if ((dig10 == CPF.charAt(9)) && (dig11 == CPF.charAt(10))){
		this.CPF = CPF;
               	return(true);
	    }
            else return(false);
                } catch (InputMismatchException erro) {
                return(false);
            }
        }
    }\n
    public String getCPF(){\n
    	return this.CPF;\n
    }\n
    
}
", "package PessoaFisica;\n
\n
import org.junit.After;\n
import org.junit.AfterClass;\n
import org.junit.Before;\n
import org.junit.BeforeClass;\n
import org.junit.Test;\n
import static org.junit.Assert.*;\n
import PessoaFisica.PessoaFisica;\n
\n
public class PessoaFisicaTest {\n
\n
    @Test\n
    public void testHipotese1() {\n
	String parametro = \"31350876461\";
	PessoaFisica pessoa = new PessoaFisica(parametro);\n
\n
	System.out.println(parametro);
        if(pessoa.valida(parametro) == true)
        {System.out.println(\":true\");
	}
	else {
	System.out.println(\":false\");
	}
        assertTrue(pessoa.valida(parametro) );\n
    }\n
\n
    @Test\n
    public void testHipotese2() {\n
	String parametro = \"00000000000\";
	PessoaFisica pessoa = new PessoaFisica(parametro);\n
\n
	System.out.println(parametro);
        if(pessoa.valida(parametro) == false)
        {System.out.println(\":true\");
	}
	else {
	System.out.println(\":false\");
	}
        assertFalse(pessoa.valida(parametro) );\n
    }\n
\n
    @Test\n
    public void testHipotese3() {\n
	String parametro = \"11111111111\";
	PessoaFisica pessoa = new PessoaFisica(parametro);\n
\n
	System.out.println(parametro);
        if(pessoa.valida(parametro) == false)
        {System.out.println(\":true\");
	}
	else {
	System.out.println(\":false\");
	}
        assertFalse(pessoa.valida(parametro) );\n
    }\n

        @Test\n
    public void testHipotese4() {\n
	String parametro = \"58845688518\";
	PessoaFisica pessoa = new PessoaFisica(parametro);\n
\n
	System.out.println(parametro);
        if(pessoa.valida(parametro) == true)
        {System.out.println(\":true\");
	}
	else {
	System.out.println(\":false\");
	}
        assertTrue(pessoa.valida(parametro) );\n
    }\n
    @Test\n
    public void testHipotese5() {\n
	String parametro = \"44444444444\";
	PessoaFisica pessoa = new PessoaFisica(parametro);\n
\n
	System.out.println(parametro);
        if(pessoa.valida(parametro) == false)
        {System.out.println(\":true\");
	}
	else {
	System.out.println(\":false\");
	}
        assertFalse(pessoa.valida(parametro) );\n
    }\n

}",2,3);

insert into Exercise ( name, statement, modelResponse, tests, course, module) values ("Caneta", "Escreva uma classe Caneta que possua os atributos modelo e tampada e os métodos tampar e destampar dizendo se a caneta está tampada ou não", "
class Caneta {\n
    String modelo;\n
    boolean tampada;\n
    public boolean tampar(){\n
    	this.tampada = true;\n
        return this.tampada;\n
    }\n
    public boolean destampar(){\n
    	this.tampada = false;\n
        return this.tampada;\n
    }\n
}
", "package Caneta;\n
\n
import org.junit.After;\n
import org.junit.AfterClass;\n
import org.junit.Before;\n
import org.junit.BeforeClass;\n
import org.junit.Test;\n
import static org.junit.Assert.*;\n
import Caneta.Caneta;\n
\n
public class CanetaTest {\n
\n
    @Test
    public void testModelo() {\n
	Caneta caneta = new Caneta();\n
\n
	caneta.modelo = \"Razor\" ; \n
	System.out.println(caneta.modelo);\n
        if(caneta.modelo.equals(\"Razor\") )
        {System.out.println(\":true\");
	}
	else {
	System.out.println(\":false\");
	}

        assertEquals(\"Razor\", caneta.modelo );\n
    }\n
\n
    @Test
    public void testTampar() {\n
	Caneta caneta = new Caneta();\n
        System.out.println(\"tampar\");
	if(caneta.tampar() == true)
        {System.out.println(\":true\");
	}
	else {
	System.out.println(\":false\");
	}

\n
        assertTrue(caneta.tampar());\n
    }\n
\n
    @Test
    public void testDestampar() {\n
	Caneta caneta = new Caneta();\n
	System.out.println(\"destampar\");
        if(caneta.destampar() == false)
        {System.out.println(\":true\");
	}
	else {
	System.out.println(\":false\");
	}

\n
	assertFalse(caneta.destampar());\n
    }\n


}",2,4);


