"id";"exerciseId";"userId";"codeUsed";"mark"
1;8;1;"int lanchonete(int x, int y){
    return 2.50;
}";1.0
2;7;1;"int somatorio(int x, int y){
    return 2;
}";0.0
3;9;1;"public class SumExercise{
    public function soma(int x, int y){
        return x + y;
    }
}";0.0
4;9;1;"public class SumExercise{
    public function soma(int x, int y){
        return x + y;
    }
}
";10.0
5;9;1;"public class SumExercise{
    public function soma(int x, int y){
        return x - y;
    }
}
";10.0
6;9;1;"public class SumExercise{
    public function soma(int x, int y){
        return x + y;
    }
}";10.0
7;9;1;"public class SumExercise{
    public function soma(int x, int y){
        return x - y;
    }
}";10.0
8;9;1;"public class SumExercise{
    public function soma(int x, int y){
        return x + y;
    }
}";10.0
9;9;1;"public class SumExercise{
    public function soma(int x, int y){
        return x + y;
    }
}
";10.0
10;9;1;"public class SumExercise{
    public function soma(int x, int y){
        return x - y;
    }
}
";10.0
11;9;1;"public class SumExercise{
    public function soma(int x, int y){
        return x + y;
    }
}";10.0
12;9;1;"public class SumExercise{
    public function soma(int x, int y){
        return x + y;
    }
}";10.0
13;9;1;"public class SumExercise{
    public function soma(int x, int y){
        return x + y;
    }
}";10.0
14;9;1;"public class SumExercise{
    public function soma(int x, int y){
        return x + y;
    }
}
";10.0
15;9;1;"public class SumExercise{
    public function soma(int x, int y){
        return x + y;
    }
}
";10.0
16;9;1;"public class SumExercise{
    public function soma(int x, int y){
        return x + y;
    }
}
";10.0
17;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
18;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
19;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
20;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
21;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
22;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
23;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
24;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
25;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
26;9;1;"";10.0
27;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
28;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
29;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
30;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
31;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
32;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
33;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
34;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
35;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x - y;
    }
}";10.0
36;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";0.0
37;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
38;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x - y;
    }
}";10.0
39;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x - y;
    }
}";0.0
40;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x - y;
    }
}";10.0
41;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x - y;
    }
}";0.0
42;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x - y;
    }
}";0.0
43;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";0.0
44;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
45;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
46;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
47;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
48;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
49;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
50;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x - y;
    }
}";10.0
51;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
52;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x - y;
    }
}";10.0
53;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x - y;
    }
}";0.0
54;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";0.0
55;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x - y;
    }
}";10.0
56;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x - y;
    }
}";10.0
57;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x - y;
    }
}";10.0
58;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x - y;
    }
}";0.0
59;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";0.0
60;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
61;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
62;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
63;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x - y;
    }
}";10.0
64;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";0.0
65;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
66;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
67;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
68;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x - y;
    }
}";0.0
69;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x - y;
    }
}";0.0
70;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x + y;
    }
}";10.0
71;9;1;"public class SumExercise{
    public int soma(int x, int y){
        return x - y;
    }
}";0.0
72;9;1;"class Conta {
    String titular;
    double saldo;

    void saca(double quantidade) {
        this.saldo -= quantidade;
    }
    void deposita(double quantidade) {
        this.saldo += quantidade;
    }
}";0.0
73;9;1;"class Conta {
    String titular;
    double saldo;

    void saca(double quantidade) {
        this.saldo -= quantidade;
    }
    void deposita(double quantidade) {
        this.saldo += quantidade;
    }
}";0.0
74;9;1;"class Conta {
    String titular;
    double saldo;

    void saca(double quantidade) {
        this.saldo -= quantidade;
    }
    void deposita(double quantidade) {
        this.saldo += quantidade;
    }
}";10.0
75;9;1;"class Conta {
    String titular;
    double saldo;

    void saca(double quantidade) {
        this.saldo -= quantidade;
    }
    void deposita(double quantidade) {
        this.saldo += quantidade;
    }
}";10.0
76;9;1;"class Conta {
    String titular;
    double saldo;

    void saca(double quantidade) {
        this.saldo -= quantidade;
    }
    void deposita(double quantidade) {
        this.saldo += quantidade;
    }
}";10.0
77;9;1;"class Conta {
    String titular;
    double saldo;

    void saca(double quantidade) {
        this.saldo += quantidade;
    }
    void deposita(double quantidade) {
        this.saldo -= quantidade;
    }
}";10.0
78;9;1;"class Conta {
    String titular;
    double saldo;
    
    void saca(double quantidade) {
        this.saldo -= quantidade;
    }
    void deposita(double quantidade) {
        this.saldo += quantidade;
    }
}";0.0
79;9;1;"class Conta {
    String titular;
    double saldo;
    
    void saca(double quantidade) {
        this.saldo -= quantidade;
    }
    void deposita(double quantidade) {
        this.saldo += quantidade;
    }
}";0.0
80;11;1;"class Conta {
    String titular;
    double saldo;

    void saca(double quantidade) {
        this.saldo -= quantidade;
    }
    void deposita(double quantidade) {
        this.saldo += quantidade;
    }
}
";10.0
81;11;1;"class Conta {
    String titular;
    double saldo;

    void saca(double quantidade) {
        this.saldo += quantidade;
    }
    void deposita(double quantidade) {
        this.saldo -= quantidade;
    }
}
";0.0
82;12;1;"class ContaComEncapsulamento {
    private String titular;
    public void setTitular(String titular){
    	this.titular = titular;
    }
    public String getTitular(){
    	return this.titular;
    }
    double saldo;
    public void setSaldo(double saldo){
   	this.saldo = saldo;
    }
    public double getSaldo(){
    	return this.saldo;
    }

    void saca(double quantidade) {
        this.saldo -= quantidade;
    }
    void deposita(double quantidade) {
        this.saldo += quantidade;
    }
}";10.0
83;12;1;"class ContaComEncapsulamento {
    private String titular;
    public void setTitular(String titular){
    	this.titular = titular;
    }
    public String getTitular(){
    	return this.titular+""haha"";
    }
    double saldo;
    public void setSaldo(double saldo){
   	this.saldo = saldo;
    }
    public double getSaldo(){
    	return this.saldo;
    }

    void saca(double quantidade) {
        this.saldo -= quantidade;
    }
    void deposita(double quantidade) {
        this.saldo += quantidade;
    }
}";10.0
84;12;1;"class ContaComEncapsulamento {
    private String titular;
    public void setTitular(String titular){
    	this.titular = titular;
    }
    public String getTitular(){
    	return this.titular+""haha"";
    }
    double saldo;
    public void setSaldo(double saldo){
   	this.saldo = saldo;
    }
    public double getSaldo(){
    	return this.saldo;
    }

    void saca(double quantidade) {
        this.saldo -= quantidade;
    }
    void deposita(double quantidade) {
        this.saldo += quantidade;
    }
}";10.0
85;12;1;"class ContaComEncapsulamento {
    private String titular;
    public void setTitular(String titular){
    	this.titular = titular;
    }
    public String getTitular(){
    	return this.titular;
    }
    double saldo;
    public void setSaldo(double saldo){
   	this.saldo = saldo;
    }
    public double getSaldo(){
    	return this.saldo;
    }

    void saca(double quantidade) {
        this.saldo -= quantidade;
    }
    void deposita(double quantidade) {
        this.saldo += quantidade;
    }
}
";10.0
86;12;1;"class ContaComEncapsulamento {
    private String titular;
    public void setTitular(String titular){
    	this.titular = titular;
    }
    public String getTitular(){
    	return this.titular;
    }
    double saldo;
    public void setSaldo(double saldo){
   	this.saldo = saldo;
    }
    public double getSaldo(){
    	return this.saldo;
    }

    void saca(double quantidade) {
        this.saldo -= quantidade;
    }
    void deposita(double quantidade) {
        this.saldo += quantidade;
    }
}
";10.0
87;12;1;"class ContaComEncapsulamento {
    private String titular;
    public void setTitular(String titular){
    	this.titular = titular+""haha"";
    }
    public String getTitular(){
    	return this.titular;
    }
    double saldo;
    public void setSaldo(double saldo){
   	this.saldo = saldo;
    }
    public double getSaldo(){
    	return this.saldo;
    }

    void saca(double quantidade) {
        this.saldo -= quantidade;
    }
    void deposita(double quantidade) {
        this.saldo += quantidade;
    }
}
";0.0
88;12;1;"class ContaComEncapsulamento {
    double saldo;
    public void setSaldo(double saldo){
   	this.saldo = saldo;
    }
    public double getSaldo(){
    	return this.saldo;
    }

    void saca(double quantidade) {
        this.saldo -= quantidade;
    }
    void deposita(double quantidade) {
        this.saldo += quantidade;
    }
}
";0.0
89;12;1;"class ContaComEncapsulamento {
    private String titular;
    public void setTitular(String titular){
    	this.titular = titular+""haha"";
    }
    public String getTitular(){
    	return this.titular;
    }
    double saldo;
    public void setSaldo(double saldo){
   	this.saldo = saldo;
    }
    public double getSaldo(){
    	return this.saldo;
    }

    void saca(double quantidade) {
        this.saldo -= quantidade;
    }
    void deposita(double quantidade) {
        this.saldo += quantidade;
    }
}
";0.0
90;12;1;"class ContaComEncapsulamento {
    private String titular;
    public void setTitular(String titular){
    	this.titular = titular;
    }
    public String getTitular(){
    	return this.titular;
    }
    double saldo;
    public void setSaldo(double saldo){
   	this.saldo = saldo;
    }
    public double getSaldo(){
    	return this.saldo;
    }

    void saca(double quantidade) {
        this.saldo -= quantidade;
    }
    void deposita(double quantidade) {
        this.saldo += quantidade;
    }
}
";0.0
91;12;1;"class ContaComEncapsulamento {
    private String titular;
    public void setTitular(String titular){
    	this.titular = titular+""haha"";
    }
    public String getTitular(){
    	return this.titular;
    }
    double saldo;
    public void setSaldo(double saldo){
   	this.saldo = saldo;
    }
    public double getSaldo(){
    	return this.saldo;
    }

    void saca(double quantidade) {
        this.saldo -= quantidade;
    }
    void deposita(double quantidade) {
        this.saldo += quantidade;
    }
}
";0.0
92;12;1;"class ContaComEncapsulamento {
    private String titular;
    public void setTitular(String titular){
    	this.titular = titular+""haha"";
    }
    public String getTitular(){
    	return this.titular;
    }
    double saldo;
    public void setSaldo(double saldo){
   	this.saldo = saldo;
    }
    public double getSaldo(){
    	return this.saldo;
    }

    void saca(double quantidade) {
        this.saldo -= quantidade;
    }
    void deposita(double quantidade) {
        this.saldo += quantidade;
    }
}
";0.0
93;12;1;"class ContaComEncapsulamento {
    private String titular;
    public void setTitular(String titular){
    	this.titular = titular+""haha"";
    }
    public String getTitular(){
    	return this.titular;
    }
    double saldo;
    public void setSaldo(double saldo){
   	this.saldo = saldo;
    }
    public double getSaldo(){
    	return this.saldo;
    }

    void saca(double quantidade) {
        this.saldo -= quantidade;
    }
    void deposita(double quantidade) {
        this.saldo += quantidade;
    }
}
";0.0
94;12;1;"class ContaComEncapsulamento {
    private String titular;
    public void setTitular(String titular){
    	this.titular = titular+""haha"";
    }
    public String getTitular(){
    	return this.titular;
    }
    double saldo;
    public void setSaldo(double saldo){
   	this.saldo = saldo;
    }
    public double getSaldo(){
    	return this.saldo;
    }

    void saca(double quantidade) {
        this.saldo -= quantidade;
    }
    void deposita(double quantidade) {
        this.saldo += quantidade;
    }
}
";7.5
95;12;1;"class ContaComEncapsulamento {
    private String titular;
    public void setTitular(String titular){
    	this.titular = titular+""haha"";
    }
    public String getTitular(){
    	return this.titular;
    }
    double saldo;
    public void setSaldo(double saldo){
   	this.saldo = saldo;
    }
    public double getSaldo(){
    	return this.saldo;
    }

    void saca(double quantidade) {
        this.saldo += quantidade;
    }
    void deposita(double quantidade) {
        this.saldo += quantidade;
    }
}
";7.5
96;12;1;"class ContaComEncapsulamento {
    private String titular;
    public void setTitular(String titular){
    	this.titular = titular+""haha"";
    }
    public String getTitular(){
    	return this.titular;
    }
    double saldo;
    public void setSaldo(double saldo){
   	this.saldo = saldo;
    }
    public double getSaldo(){
    	return this.saldo;
    }

    void saca(double quantidade) {
        this.saldo += quantidade;
    }
    void deposita(double quantidade) {
        this.saldo += quantidade;
    }
}
";5.0
97;12;1;"class ContaComEncapsulamento {
    private String titular;
    public void setTitular(String titular){
    	this.titular = titular+""haha"";
    }
    public String getTitular(){
    	return this.titular;
    }
    double saldo;
    public void setSaldo(double saldo){
   	this.saldo = saldo;
    }
    public double getSaldo(){
    	return this.saldo;
    }

    void saca(double quantidade) {
        this.saldo += quantidade;
    }
    void deposita(double quantidade) {
        this.saldo += quantidade;
    }
}
";5.0
98;1;1;"int soma(int x, int y){
    return x + y;
}";10.0
99;1;1;"int soma(int x, int y){
    return x - y;
}";3.3
100;2;1;"int fatorial(int x){
    return -1;
}";0.0
101;11;1;"class Conta {
    String titular;
    double saldo;
    
    void saca(double quantidade){
        this.saldo -= quantidade;
    }
    void deposita(double quantidade) {
        this.saldo += quantidade;
    }
}";10.0
102;11;1;"class Conta {
    String titular;
    double saldo;
    
    void saca(double quantidade){
        this.saldo -= quantidade;
    }
    void deposita(double quantidade) {
        this.saldo += quantidade;
    }
}";10.0
103;11;1;"class Conta {
    String titular;
    double saldo;
    
    void saca(double quantidade){
        this.saldo += quantidade;
    }
    void deposita(double quantidade) {
        this.saldo -= quantidade;
    }
}";3.3
104;14;1;"import java.util.InputMismatchException;

class PessoaFisica {
    private String CPF;
    PessoaFisica(String CPF){
    	valida(CPF);
    }
    public boolean valida(String CPF){
    	        // considera-se erro CPF's formados por uma sequencia de numeros iguais
        if (CPF.equals(""00000000000"") ||
            CPF.equals(""11111111111"") ||
            CPF.equals(""22222222222"") || CPF.equals(""33333333333"") ||
            CPF.equals(""44444444444"") || CPF.equals(""55555555555"") ||
            CPF.equals(""66666666666"") || CPF.equals(""77777777777"") ||
            CPF.equals(""88888888888"") || CPF.equals(""99999999999"") ||
            (CPF.length() != 11) )
            return(false);
          
        char dig10, dig11;
        int sm, i, r, num, peso;
          
        // \""try\"" - protege o codigo para eventuais erros de conversao de tipo (int)
        try {
        // Calculo do 1o. Digito Verificador
            sm = 0;
            peso = 10;
            for (i=0; i<9; i++) {              
        // converte o i-esimo caractere do CPF em um numero:
        // por exemplo, transforma o caractere '0' no inteiro 0         
        // (48 eh a posicao de '0' na tabela ASCII)         
            num = (int)(CPF.charAt(i) - 48); 
            sm = sm + (num * peso);
            peso = peso - 1;
            }
          
            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                dig10 = '0';
            else dig10 = (char)(r + 48); // converte no respectivo caractere numerico
          
        // Calculo do 2o. Digito Verificador
            sm = 0;
            peso = 11;
            for(i=0; i<10; i++) {
            num = (int)(CPF.charAt(i) - 48);
            sm = sm + (num * peso);
            peso = peso - 1;
            }
          
            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                 dig11 = '0';
            else dig11 = (char)(r + 48);
          
        // Verifica se os digitos calculados conferem com os digitos informados.
            if ((dig10 == CPF.charAt(9)) && (dig11 == CPF.charAt(10))){
            	this.CPF = CPF;
               	return(true);
            }
            else return(false);
                } catch (InputMismatchException erro) {
                return(false);
            }
     }
 
    public String getCPF(){
    	return this.CPF;
    }
    
}
";0.0
105;14;1;"import java.util.InputMismatchException;

class PessoaFisica {
    private String CPF;
    PessoaFisica(String CPF){
    	valida(CPF);
    }
    public boolean valida(String CPF){
    	        // considera-se erro CPF's formados por uma sequencia de numeros iguais
        if (CPF.equals(""00000000000"") ||
            CPF.equals(""11111111111"") ||
            CPF.equals(""22222222222"") || CPF.equals(""33333333333"") ||
            CPF.equals(""44444444444"") || CPF.equals(""55555555555"") ||
            CPF.equals(""66666666666"") || CPF.equals(""77777777777"") ||
            CPF.equals(""88888888888"") || CPF.equals(""99999999999"") ||
            (CPF.length() != 11) )
            return(false);
          
        char dig10, dig11;
        int sm, i, r, num, peso;
          
        // \""try\"" - protege o codigo para eventuais erros de conversao de tipo (int)
        try {
        // Calculo do 1o. Digito Verificador
            sm = 0;
            peso = 10;
            for (i=0; i<9; i++) {              
        // converte o i-esimo caractere do CPF em um numero:
        // por exemplo, transforma o caractere '0' no inteiro 0         
        // (48 eh a posicao de '0' na tabela ASCII)         
            num = (int)(CPF.charAt(i) - 48); 
            sm = sm + (num * peso);
            peso = peso - 1;
            }
          
            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                dig10 = '0';
            else dig10 = (char)(r + 48); // converte no respectivo caractere numerico
          
        // Calculo do 2o. Digito Verificador
            sm = 0;
            peso = 11;
            for(i=0; i<10; i++) {
            num = (int)(CPF.charAt(i) - 48);
            sm = sm + (num * peso);
            peso = peso - 1;
            }
          
            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                 dig11 = '0';
            else dig11 = (char)(r + 48);
          
        // Verifica se os digitos calculados conferem com os digitos informados.
            if ((dig10 == CPF.charAt(9)) && (dig11 == CPF.charAt(10))){
            	this.CPF = CPF;
               	return(true);
            }
            else return(false);
                } catch (InputMismatchException erro) {
                return(false);
            }
     }
 
    public String getCPF(){
    	return this.CPF;
    }
    
}
";0.0
106;14;1;"import java.util.InputMismatchException;

class PessoaFisica {
    private String CPF;
    PessoaFisica(String CPF){
    	valida(CPF);
    }
    public boolean valida(String CPF){
    	        // considera-se erro CPF's formados por uma sequencia de numeros iguais
        if (CPF.equals(""00000000000"") ||
            CPF.equals(""11111111111"") ||
            CPF.equals(""22222222222"") || CPF.equals(""33333333333"") ||
            CPF.equals(""44444444444"") || CPF.equals(""55555555555"") ||
            CPF.equals(""66666666666"") || CPF.equals(""77777777777"") ||
            CPF.equals(""88888888888"") || CPF.equals(""99999999999"") ||
            (CPF.length() != 11) )
            return(false);
          
        char dig10, dig11;
        int sm, i, r, num, peso;
          
        // \""try\"" - protege o codigo para eventuais erros de conversao de tipo (int)
        try {
        // Calculo do 1o. Digito Verificador
            sm = 0;
            peso = 10;
            for (i=0; i<9; i++) {              
        // converte o i-esimo caractere do CPF em um numero:
        // por exemplo, transforma o caractere '0' no inteiro 0         
        // (48 eh a posicao de '0' na tabela ASCII)         
            num = (int)(CPF.charAt(i) - 48); 
            sm = sm + (num * peso);
            peso = peso - 1;
            }
          
            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                dig10 = '0';
            else dig10 = (char)(r + 48); // converte no respectivo caractere numerico
          
        // Calculo do 2o. Digito Verificador
            sm = 0;
            peso = 11;
            for(i=0; i<10; i++) {
            num = (int)(CPF.charAt(i) - 48);
            sm = sm + (num * peso);
            peso = peso - 1;
            }
          
            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                 dig11 = '0';
            else dig11 = (char)(r + 48);
          
        // Verifica se os digitos calculados conferem com os digitos informados.
            if ((dig10 == CPF.charAt(9)) && (dig11 == CPF.charAt(10))){
            	this.CPF = CPF;
               	return(true);
            }
            else return(false);
                } catch (InputMismatchException erro) {
                return(false);
            }
     }
 
    public String getCPF(){
    	return this.CPF;
    }
    
}
";0.0
107;14;1;"package javaClient;

import java.util.InputMismatchException;

class PessoaFisica {
    private String CPF;
    PessoaFisica(String CPF){
    	valida(CPF);
    }
    public boolean valida(String CPF){
    	        // considera-se erro CPF's formados por uma sequencia de numeros iguais
        if (CPF.equals(""00000000000"") ||
            CPF.equals(""11111111111"") ||
            CPF.equals(""22222222222"") || CPF.equals(""33333333333"") ||
            CPF.equals(""44444444444"") || CPF.equals(""55555555555"") ||
            CPF.equals(""66666666666"") || CPF.equals(""77777777777"") ||
            CPF.equals(""88888888888"") || CPF.equals(""99999999999"") ||
            (CPF.length() != 11) )
            return(false);
          
        char dig10, dig11;
        int sm, i, r, num, peso;
          
        // \""try\"" - protege o codigo para eventuais erros de conversao de tipo (int)
        try {
        // Calculo do 1o. Digito Verificador
            sm = 0;
            peso = 10;
            for (i=0; i<9; i++) {              
        // converte o i-esimo caractere do CPF em um numero:
        // por exemplo, transforma o caractere '0' no inteiro 0         
        // (48 eh a posicao de '0' na tabela ASCII)         
            num = (int)(CPF.charAt(i) - 48); 
            sm = sm + (num * peso);
            peso = peso - 1;
            }
          
            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                dig10 = '0';
            else dig10 = (char)(r + 48); // converte no respectivo caractere numerico
          
        // Calculo do 2o. Digito Verificador
            sm = 0;
            peso = 11;
            for(i=0; i<10; i++) {
            num = (int)(CPF.charAt(i) - 48);
            sm = sm + (num * peso);
            peso = peso - 1;
            }
          
            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                 dig11 = '0';
            else dig11 = (char)(r + 48);
          
        // Verifica se os digitos calculados conferem com os digitos informados.
            if ((dig10 == CPF.charAt(9)) && (dig11 == CPF.charAt(10))){
            	this.CPF = CPF;
               	return(true);
            }
            else return(false);
                } catch (InputMismatchException erro) {
                return(false);
            }
     }
 
    public String getCPF(){
    	return this.CPF;
    }
    
}
";0.0
108;14;1;"import java.util.InputMismatchException;

class PessoaFisica {
    private String CPF;
    PessoaFisica(String CPF){
    	valida(CPF);
    }
    public boolean valida(String CPF){
    	        // considera-se erro CPF's formados por uma sequencia de numeros iguais
        if (CPF.equals(""00000000000"") ||
            CPF.equals(""11111111111"") ||
            CPF.equals(""22222222222"") || CPF.equals(""33333333333"") ||
            CPF.equals(""44444444444"") || CPF.equals(""55555555555"") ||
            CPF.equals(""66666666666"") || CPF.equals(""77777777777"") ||
            CPF.equals(""88888888888"") || CPF.equals(""99999999999"") ||
            (CPF.length() != 11) )
            return(false);
          
        char dig10, dig11;
        int sm, i, r, num, peso;
          
        // \""try\"" - protege o codigo para eventuais erros de conversao de tipo (int)
        try {
        // Calculo do 1o. Digito Verificador
            sm = 0;
            peso = 10;
            for (i=0; i<9; i++) {              
        // converte o i-esimo caractere do CPF em um numero:
        // por exemplo, transforma o caractere '0' no inteiro 0         
        // (48 eh a posicao de '0' na tabela ASCII)         
            num = (int)(CPF.charAt(i) - 48); 
            sm = sm + (num * peso);
            peso = peso - 1;
            }
          
            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                dig10 = '0';
            else dig10 = (char)(r + 48); // converte no respectivo caractere numerico
          
        // Calculo do 2o. Digito Verificador
            sm = 0;
            peso = 11;
            for(i=0; i<10; i++) {
            num = (int)(CPF.charAt(i) - 48);
            sm = sm + (num * peso);
            peso = peso - 1;
            }
          
            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                 dig11 = '0';
            else dig11 = (char)(r + 48);
          
        // Verifica se os digitos calculados conferem com os digitos informados.
            if ((dig10 == CPF.charAt(9)) && (dig11 == CPF.charAt(10))){
            	this.CPF = CPF;
               	return(false);
            }
            else return(true);
                } catch (InputMismatchException erro) {
                return(true);
            }
     }
 
    public String getCPF(){
    	return this.CPF;
    }
    
}
";0.0
109;14;1;"import java.util.InputMismatchException;

class PessoaFisica {
    private String CPF;
    PessoaFisica(String CPF){
    	valida(CPF);
    }
    public boolean valida(String CPF){
    	        // considera-se erro CPF's formados por uma sequencia de numeros iguais
        if (CPF.equals(""00000000000"") ||
            CPF.equals(""11111111111"") ||
            CPF.equals(""22222222222"") || CPF.equals(""33333333333"") ||
            CPF.equals(""44444444444"") || CPF.equals(""55555555555"") ||
            CPF.equals(""66666666666"") || CPF.equals(""77777777777"") ||
            CPF.equals(""88888888888"") || CPF.equals(""99999999999"") ||
            (CPF.length() != 11) )
            return(false);
          
        char dig10, dig11;
        int sm, i, r, num, peso;
          
        // \""try\"" - protege o codigo para eventuais erros de conversao de tipo (int)
        try {
        // Calculo do 1o. Digito Verificador
            sm = 0;
            peso = 10;
            for (i=0; i<9; i++) {              
        // converte o i-esimo caractere do CPF em um numero:
        // por exemplo, transforma o caractere '0' no inteiro 0         
        // (48 eh a posicao de '0' na tabela ASCII)         
            num = (int)(CPF.charAt(i) - 48); 
            sm = sm + (num * peso);
            peso = peso - 1;
            }
          
            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                dig10 = '0';
            else dig10 = (char)(r + 48); // converte no respectivo caractere numerico
          
        // Calculo do 2o. Digito Verificador
            sm = 0;
            peso = 11;
            for(i=0; i<10; i++) {
            num = (int)(CPF.charAt(i) - 48);
            sm = sm + (num * peso);
            peso = peso - 1;
            }
          
            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                 dig11 = '0';
            else dig11 = (char)(r + 48);
          
        // Verifica se os digitos calculados conferem com os digitos informados.
            if ((dig10 == CPF.charAt(9)) && (dig11 == CPF.charAt(10))){
            	this.CPF = CPF;
               	return(true);
            }
            else return(false);
                } catch (InputMismatchException erro) {
                return(false);
            }
     }
 
    public String getCPF(){
    	return this.CPF;
    }
    
}
";0.0
110;14;1;"import java.util.InputMismatchException;

class PessoaFisica {
    private String CPF;
    PessoaFisica(String CPF){
    	valida(CPF);
    }
    public boolean valida(String CPF){
    	        // considera-se erro CPF's formados por uma sequencia de numeros iguais
        if (CPF.equals(""00000000000"") ||
            CPF.equals(""11111111111"") ||
            CPF.equals(""22222222222"") || CPF.equals(""33333333333"") ||
            CPF.equals(""44444444444"") || CPF.equals(""55555555555"") ||
            CPF.equals(""66666666666"") || CPF.equals(""77777777777"") ||
            CPF.equals(""88888888888"") || CPF.equals(""99999999999"") ||
            (CPF.length() != 11) )
            return(false);
          
        char dig10, dig11;
        int sm, i, r, num, peso;
          
        // \""try\"" - protege o codigo para eventuais erros de conversao de tipo (int)
        try {
        // Calculo do 1o. Digito Verificador
            sm = 0;
            peso = 10;
            for (i=0; i<9; i++) {              
        // converte o i-esimo caractere do CPF em um numero:
        // por exemplo, transforma o caractere '0' no inteiro 0         
        // (48 eh a posicao de '0' na tabela ASCII)         
            num = (int)(CPF.charAt(i) - 48); 
            sm = sm + (num * peso);
            peso = peso - 1;
            }
          
            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                dig10 = '0';
            else dig10 = (char)(r + 48); // converte no respectivo caractere numerico
          
        // Calculo do 2o. Digito Verificador
            sm = 0;
            peso = 11;
            for(i=0; i<10; i++) {
            num = (int)(CPF.charAt(i) - 48);
            sm = sm + (num * peso);
            peso = peso - 1;
            }
          
            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                 dig11 = '0';
            else dig11 = (char)(r + 48);
          
        // Verifica se os digitos calculados conferem com os digitos informados.
            if ((dig10 == CPF.charAt(9)) && (dig11 == CPF.charAt(10))){
            	this.CPF = CPF;
               	return(false);
            }
            else return(true);
                } catch (InputMismatchException erro) {
                return(true);
            }
     }
 
    public String getCPF(){
    	return this.CPF;
    }
    
}
";0.0
111;14;1;"import java.util.InputMismatchException;

class PessoaFisica {
    private String CPF;
    PessoaFisica(String CPF){
    	valida(CPF);
    }
    public boolean valida(String CPF){
    	        // considera-se erro CPF's formados por uma sequencia de numeros iguais
        if (CPF.equals(""00000000000"") ||
            CPF.equals(""11111111111"") ||
            CPF.equals(""22222222222"") || CPF.equals(""33333333333"") ||
            CPF.equals(""44444444444"") || CPF.equals(""55555555555"") ||
            CPF.equals(""66666666666"") || CPF.equals(""77777777777"") ||
            CPF.equals(""88888888888"") || CPF.equals(""99999999999"") ||
            (CPF.length() != 11) )
            return(false);
          
        char dig10, dig11;
        int sm, i, r, num, peso;
          
        // \""try\"" - protege o codigo para eventuais erros de conversao de tipo (int)
        try {
        // Calculo do 1o. Digito Verificador
            sm = 0;
            peso = 10;
            for (i=0; i<9; i++) {              
        // converte o i-esimo caractere do CPF em um numero:
        // por exemplo, transforma o caractere '0' no inteiro 0         
        // (48 eh a posicao de '0' na tabela ASCII)         
            num = (int)(CPF.charAt(i) - 48); 
            sm = sm + (num * peso);
            peso = peso - 1;
            }
          
            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                dig10 = '0';
            else dig10 = (char)(r + 48); // converte no respectivo caractere numerico
          
        // Calculo do 2o. Digito Verificador
            sm = 0;
            peso = 11;
            for(i=0; i<10; i++) {
            num = (int)(CPF.charAt(i) - 48);
            sm = sm + (num * peso);
            peso = peso - 1;
            }
          
            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                 dig11 = '0';
            else dig11 = (char)(r + 48);
          
        // Verifica se os digitos calculados conferem com os digitos informados.
            if ((dig10 == CPF.charAt(9)) && (dig11 == CPF.charAt(10))){
            	this.CPF = CPF;
               	return(false);
            }
            else return(true);
                } catch (InputMismatchException erro) {
                return(true);
            }
     }
 
    public String getCPF(){
    	return this.CPF;
    }
    
}
";0.0
112;14;1;"import java.util.InputMismatchException;

class PessoaFisica {
    private String CPF;
    PessoaFisica(String CPF){
    	valida(CPF);
    }
    public boolean valida(String CPF){
    	        // considera-se erro CPF's formados por uma sequencia de numeros iguais
        if (CPF.equals(""00000000000"") ||
            CPF.equals(""11111111111"") ||
            CPF.equals(""22222222222"") || CPF.equals(""33333333333"") ||
            CPF.equals(""44444444444"") || CPF.equals(""55555555555"") ||
            CPF.equals(""66666666666"") || CPF.equals(""77777777777"") ||
            CPF.equals(""88888888888"") || CPF.equals(""99999999999"") ||
            (CPF.length() != 11) )
            return(false);
          
        char dig10, dig11;
        int sm, i, r, num, peso;
          
        // \""try\"" - protege o codigo para eventuais erros de conversao de tipo (int)
        try {
        // Calculo do 1o. Digito Verificador
            sm = 0;
            peso = 10;
            for (i=0; i<9; i++) {              
        // converte o i-esimo caractere do CPF em um numero:
        // por exemplo, transforma o caractere '0' no inteiro 0         
        // (48 eh a posicao de '0' na tabela ASCII)         
            num = (int)(CPF.charAt(i) - 48); 
            sm = sm + (num * peso);
            peso = peso - 1;
            }
          
            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                dig10 = '0';
            else dig10 = (char)(r + 48); // converte no respectivo caractere numerico
          
        // Calculo do 2o. Digito Verificador
            sm = 0;
            peso = 11;
            for(i=0; i<10; i++) {
            num = (int)(CPF.charAt(i) - 48);
            sm = sm + (num * peso);
            peso = peso - 1;
            }
          
            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                 dig11 = '0';
            else dig11 = (char)(r + 48);
          
        // Verifica se os digitos calculados conferem com os digitos informados.
            if ((dig10 == CPF.charAt(9)) && (dig11 == CPF.charAt(10))){
            	this.CPF = CPF;
               	return(true);
            }
            else return(false);
                } catch (InputMismatchException erro) {
                return(false);
            }
     }
 
    public String getCPF(){
    	return this.CPF;
    }
    
}
";10.0
113;14;1;"import java.util.InputMismatchException;

class PessoaFisica {
    private String CPF;
    PessoaFisica(String CPF){
    	valida(CPF);
    }
    public boolean valida(String CPF){
    	        // considera-se erro CPF's formados por uma sequencia de numeros iguais
        if (CPF.equals(""00000000000"") ||
            CPF.equals(""11111111111"") ||
            CPF.equals(""22222222222"") || CPF.equals(""33333333333"") ||
            CPF.equals(""44444444444"") || CPF.equals(""55555555555"") ||
            CPF.equals(""66666666666"") || CPF.equals(""77777777777"") ||
            CPF.equals(""88888888888"") || CPF.equals(""99999999999"") ||
            (CPF.length() != 11) )
            return(false);
          
        char dig10, dig11;
        int sm, i, r, num, peso;
          
        // \""try\"" - protege o codigo para eventuais erros de conversao de tipo (int)
        try {
        // Calculo do 1o. Digito Verificador
            sm = 0;
            peso = 10;
            for (i=0; i<9; i++) {              
        // converte o i-esimo caractere do CPF em um numero:
        // por exemplo, transforma o caractere '0' no inteiro 0         
        // (48 eh a posicao de '0' na tabela ASCII)         
            num = (int)(CPF.charAt(i) - 48); 
            sm = sm + (num * peso);
            peso = peso - 1;
            }
          
            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                dig10 = '0';
            else dig10 = (char)(r + 48); // converte no respectivo caractere numerico
          
        // Calculo do 2o. Digito Verificador
            sm = 0;
            peso = 11;
            for(i=0; i<10; i++) {
            num = (int)(CPF.charAt(i) - 48);
            sm = sm + (num * peso);
            peso = peso - 1;
            }
          
            r = 11 - (sm % 11);
            if ((r == 10) || (r == 11))
                 dig11 = '0';
            else dig11 = (char)(r + 48);
          
        // Verifica se os digitos calculados conferem com os digitos informados.
            if ((dig10 == CPF.charAt(9)) && (dig11 == CPF.charAt(10))){
            	this.CPF = CPF;
               	return(false);
            }
            else return(true);
                } catch (InputMismatchException erro) {
                return(true);
            }
     }
 
    public String getCPF(){
    	return this.CPF;
    }
    
}
";6.0
114;11;8;"public class Conta {
    String titular;
    float saldo;
    
    public float saca(float valor){ 
        this.saldo -= valor;
        return saldo; 
    }
    
    public float deposita(float valor){ 
        this.saldo += valor;
        return saldo; 
    }
    
} ";10.0
115;11;8;"public class Conta {
    String titular;
    float saldo;
    
    public float saca(float valor){ 
        this.saldo -= valor;
        return saldo; 
    }
    
    public float deposita(float valor){ 
        this.saldo += valor;
        return saldo; 
    }
    
} ";10.0
116;11;8;"class Conta {

    String titular;

    double saldo;



    void saca(double quantidade) {

        this.saldo -= quantidade;

    }

    void deposita(double quantidade) {

        this.saldo += quantidade;

    }

}";10.0
117;11;8;"public class Conta {

    String titular;

    double saldo;



    void saca(double quantidade) {

        this.saldo -= quantidade;

    }

    void deposita(double quantidade) {

        this.saldo += quantidade;

    }

}";10.0
118;11;8;"public class Conta {

    String titular;

    double saldo;

    double saca(double quantidade) {

        this.saldo -= quantidade;
        return saldo;
    }

    double deposita(double quantidade) {

        this.saldo += quantidade;
        
        return saldo;
    }

}";10.0
119;11;8;"public class Conta {

    String titular;

    double saldo;

    double saca(double quantidade) {

        this.saldo -= quantidade;
        return saldo;
    }

    double deposita(double quantidade) {

        this.saldo += quantidade;
        
        return saldo.
    }

}";10.0
120;15;8;"class Caneta {

    String modelo;

    boolean tampada;

    public boolean tampar(){

    	this.tampada = true;

        return this.tampada;

    }

    public boolean destampar(){

    	this.tampada = false;

        return this.tampada;

    }

}
";10.0
121;15;8;"class Caneta {

    String modelo;

    boolean tampada;

    public boolean tampar(){

    	this.tampada = true;

        return this.tampada;

    }

    public boolean destampar(){

    	this.tampada = false;

        return this.tampada;

    }

}
";10.0
122;15;8;"class Caneta {

    String modelo;

    boolean tampada;

    public boolean tampar(){

    	this.tampada = false;

        return this.tampada;

    }

    public boolean destampar(){

    	this.tampada = false;

        return this.tampada;

    }

}";10.0
123;15;8;"class Caneta {

    String modelo;

    boolean tampada;

    public boolean tampar(){

    	this.tampada = false;

        return this.tampada;

    }

    public boolean destampar(){

    	this.tampada = false;

        return this.tampada;

    }

}";6.7
124;11;8;"public class Conta {
    String titular;
    double saldo;
    
    public double saca(double valor){
        saldo -= valor;
        return saldo;
    }
    
    public double deposita(double valor){
        saldo += valor;
        return saldo;
    }
}";10.0
125;11;8;"public class Conta {
    String titular;
    double saldo;
    
    public double deposita(double valor){
        saldo += valor;
        return saldo;
    }
    public double saca(double valor){
        saldo -= valor;
        return saldo;
    }
}";10.0
126;11;8;"class Conta {

    String titular;

    double saldo;



    void saca(double quantidade) {

        this.saldo -= quantidade;

    }

    void deposita(double quantidade) {

        this.saldo += quantidade;

    }

}
";10.0
127;11;8;"class Conta {

    String titular;

    double saldo;



    void saca(double quantidade) {

        this.saldo -= quantidade;

    }

    void deposita(double quantidade) {

        this.saldo += quantidade;

    }

}";10.0
128;1;8;"int soma(int x, int y)
 {
 int z; 
 z = x + y; 
 return z; 

                 }
";10.0
129;2;8;"int fatorial(int n)
{
     int fat, i;
     fat = 0;
     for (i = 1; i <= n; i = i + 1)
     {
         fat = fat * i;
     }
     return fat;
}";0.0
130;2;8;"int fatorial(int n)
{
     int fat, i;
     fat = 1;
     for (i = 1; i <= n; i = i + 1)
     {
         fat = fat * i;
     }
     return fat;
}";10.0
131;1;8;"int soma(int x, int y)
 {
 int z; 
 z = x - y; 
 return z; 

                 }
";3.3
